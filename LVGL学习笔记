`lv_obj_invalidate()` 函数是 LittlevGL 图形库中的一个函数，用于标记一个对象（object）需要重新绘制。
当一个对象的外观或状态发生变化时，需要重新绘制该对象以反映这些变化。
`lv_obj_invalidate()` 函数可以将该对象标记为需要重新绘制，从而触发重新绘制操作。

具体来说，`lv_obj_invalidate()` 函数会将对象的 `invalidate` 标志位置为 `true`，表示该对象需要重新绘制。
在 LittlevGL 的绘图循环中，会检查所有对象的 `invalidate` 标志位，如果为 `true`，则会调用对象的绘制函数进行重新绘制。
这样就可以实现对象的动态更新。需要注意的是，`lv_obj_invalidate()` 函数只是标记对象需要重新绘制，实际的重新绘制操作是在 LittlevGL 的绘图循环中进行的。
因此，如果需要立即重新绘制对象，可以在调用 `lv_obj_invalidate()` 函数后手动调用 `lv_task_handler()` 函数来触发绘图循环。

刷新整个屏幕对象：lv_obj_invalidate(lv_scr_act());


`uv_poll_init`函数是libuv库中用于初始化一个`uv_poll_t`结构体的函数。
`uv_poll_t`结构体是用于监视文件描述符（file descriptor）或套接字（socket）的可读、可写或错误事件的结构体。
具体来说，`uv_poll_init`函数的作用是将`uv_poll_t`结构体初始化为一个可用的状态。
它会将`uv_poll_t`结构体中的各个字段设置为默认值，并将其与指定的事件循环（event loop）进行关联。
在初始化完成后，可以使用`uv_poll_start`函数将`uv_poll_t`结构体与要监视的文件描述符或套接字进行关联，并开始监视其可读、可写或错误事件。
以下是`uv_poll_init`函数的函数原型：
int uv_poll_init(uv_loop_t* loop, uv_poll_t* handle, int fd);
其中，`loop`参数是指向要关联的事件循环的指针，`handle`参数是指向要初始化的`uv_poll_t`结构体的指针，`fd`参数是要监视的文件描述符或套接字的文件描述符值。
需要注意的是，`uv_poll_init`函数只是将`uv_poll_t`结构体初始化为一个可用的状态，并不会开始监视文件描述符或套接字的事件。要开始监视事件，需要调用`uv_poll_start`函数。


`lv_obj_update_layout`是一个LVGL函数，用于更新对象的布局。当对象的位置、大小或对齐方式发生变化时，需要调用此函数来更新对象的布局。
具体来说，`lv_obj_update_layout`函数会重新计算对象的位置和大小，并根据对象的对齐方式将其放置在正确的位置。如果对象的位置或大小发生了变化，它还会更新对象的子对象的布局。
需要注意的是，`lv_obj_update_layout`函数只会更新对象的布局，不会重新绘制对象。如果需要重新绘制对象，请调用`lv_obj_invalidate`函数。
以下是`lv_obj_update_layout`函数的函数原型：
void lv_obj_update_layout(lv_obj_t * obj);
其中，`obj`是要更新布局的对象的指针。

lv_refr_join_area：
对所有的脏域进行合并：
1.先对某一脏域的标志进行判断，如果不等于0，说明该脏域已经被合并过了，处理下一个脏域。
if(disp_refr->inv_area_joined[join_in] != 0) continue;
2.只处理未连接的区域并忽略其本身
 if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {continue;}
3.检查这些区域是否有接触
if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {continue;}
4.计算合并区域
_lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
5.判断，仅仅当合并后的区域小于合并之前的面积，才会合并，并将合并后的区域加入inv_areas
lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
6.对处理过的脏域，进行标记
disp_refr->inv_area_joined[join_from] = 1;


在LVGL中，`struct _lv_draw_unit_t`是一个结构体，用于描述绘图任务的单元。
它包含了一些绘图任务的相关信息，例如绘图任务的类型、绘图任务的坐标、绘图任务的颜色等等。
`struct _lv_draw_unit_t`的主要作用是将绘图任务分解成小的单元，以便于在绘图过程中进行优化和调度。
通过将绘图任务分解成小的单元，可以更好地控制绘图任务的执行顺序和优先级，从而提高绘图的效率和性能。
此外，`struct _lv_draw_unit_t`还可以用于实现一些高级的绘图效果，例如渐变、阴影、透明度等等。
通过在`struct _lv_draw_unit_t`中添加一些额外的属性和参数，可以实现更加复杂和高级的绘图效果。

/*Skip palette*/
    data += LV_COLOR_INDEXED_PALETTE_SIZE(buf->header.cf) * sizeof(lv_color32_t);
#define LV_COLOR_INDEXED_PALETTE_SIZE(cf) ((cf) == LV_COLOR_FORMAT_I1 ? 2 :\
                                           (cf) == LV_COLOR_FORMAT_I2 ? 4 :\
                                           (cf) == LV_COLOR_FORMAT_I4 ? 16 :\
                                           (cf) == LV_COLOR_FORMAT_I8 ? 256 : 0)
从这可以看出不同格式下palette的大小。

1.lv_draw_finalize_task_creation：
创建和配置绘制任务时需要调用。 它将向小部件发送有关新绘制任务的事件并将其分配给绘制单元
2.lv_draw_dispatch:
尝试将绘制任务分派给绘制单元
3.lv_draw_dispatch_layer
内部用于尝试调度具体层的绘制任务
4.最终调用dispatch_cb进行具体的绘制
5.dispatch_cb由初始化的时候注册实际的处理函数draw_dispatch
6.draw_dispatch函数，layer->draw_buf->data中是layer中的target buffer（line205）




lv_draw_dispatch_wait_for_request
等待新的调度请求。
lv_draw_dispatch_request
当绘制单元完成绘制任务时，它需要请求调度，让 LVGL 为其分配新的绘制任务
lv_draw_get_next_available_task
获取一个可用的绘制任务（source），屏幕上每个层面（layer）存在很多不挨着的脏域（join之后），每个这样的脏域，都是一个绘制任务。
is_independent
检查是否有旧的绘制任务重叠的区域t_check
_lv_area_intersect
检查两个区域是否有重叠
