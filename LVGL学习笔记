`lv_obj_invalidate()` 函数是 LittlevGL 图形库中的一个函数，用于标记一个对象（object）需要重新绘制。
当一个对象的外观或状态发生变化时，需要重新绘制该对象以反映这些变化。
`lv_obj_invalidate()` 函数可以将该对象标记为需要重新绘制，从而触发重新绘制操作。

具体来说，`lv_obj_invalidate()` 函数会将对象的 `invalidate` 标志位置为 `true`，表示该对象需要重新绘制。
在 LittlevGL 的绘图循环中，会检查所有对象的 `invalidate` 标志位，如果为 `true`，则会调用对象的绘制函数进行重新绘制。
这样就可以实现对象的动态更新。需要注意的是，`lv_obj_invalidate()` 函数只是标记对象需要重新绘制，实际的重新绘制操作是在 LittlevGL 的绘图循环中进行的。
因此，如果需要立即重新绘制对象，可以在调用 `lv_obj_invalidate()` 函数后手动调用 `lv_task_handler()` 函数来触发绘图循环。

刷新整个屏幕对象：lv_obj_invalidate(lv_scr_act());


`uv_poll_init`函数是libuv库中用于初始化一个`uv_poll_t`结构体的函数。
`uv_poll_t`结构体是用于监视文件描述符（file descriptor）或套接字（socket）的可读、可写或错误事件的结构体。
具体来说，`uv_poll_init`函数的作用是将`uv_poll_t`结构体初始化为一个可用的状态。
它会将`uv_poll_t`结构体中的各个字段设置为默认值，并将其与指定的事件循环（event loop）进行关联。
在初始化完成后，可以使用`uv_poll_start`函数将`uv_poll_t`结构体与要监视的文件描述符或套接字进行关联，并开始监视其可读、可写或错误事件。
以下是`uv_poll_init`函数的函数原型：
int uv_poll_init(uv_loop_t* loop, uv_poll_t* handle, int fd);
其中，`loop`参数是指向要关联的事件循环的指针，`handle`参数是指向要初始化的`uv_poll_t`结构体的指针，`fd`参数是要监视的文件描述符或套接字的文件描述符值。
需要注意的是，`uv_poll_init`函数只是将`uv_poll_t`结构体初始化为一个可用的状态，并不会开始监视文件描述符或套接字的事件。要开始监视事件，需要调用`uv_poll_start`函数。


`lv_obj_update_layout`是一个LVGL函数，用于更新对象的布局。当对象的位置、大小或对齐方式发生变化时，需要调用此函数来更新对象的布局。
具体来说，`lv_obj_update_layout`函数会重新计算对象的位置和大小，并根据对象的对齐方式将其放置在正确的位置。如果对象的位置或大小发生了变化，它还会更新对象的子对象的布局。
需要注意的是，`lv_obj_update_layout`函数只会更新对象的布局，不会重新绘制对象。如果需要重新绘制对象，请调用`lv_obj_invalidate`函数。
以下是`lv_obj_update_layout`函数的函数原型：
void lv_obj_update_layout(lv_obj_t * obj);
其中，`obj`是要更新布局的对象的指针。
