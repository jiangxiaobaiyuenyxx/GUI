绘制开始啦！！！

1.lv_obj_send_event(lv_obj_t * obj, lv_event_code_t event_code, void * param)
用于向指定的对象发送事件。事件可以是用户定义的自定义事件，由event_send_core处理接下来的事情
2.event_send_core
lv_event_send(list, e, true)-->lv_obj_event_base--->lv_event_send(list, e, false)
这样一个流程之后，开始对该obj的父对象进行同样的处理，直到没有可以处理的父对象。

3.lv_obj_event_base(const lv_obj_class_t * class_p, lv_event_t * e)
调用event_cb，处理事件，event_cb有两个类型，一个是class类型注册回调，一个是具体obj注册的回调函数（lv_obj_add_event_cb）

4.lv_obj_event就是class 类型的event_cb，在初始化的时候配置。
lv_obj_add_event_cb函数则是后面根据需要注册具体的回调，lv_event_add(&obj->spec_attr->event_list, event_cb, filter, user_data);

5.lv_obj_redraw(lv_layer_t * layer, lv_obj_t * obj)
从lv_event_t中拿到需要绘制的obj对象，得到需要重新绘制obj的哪些区域、背景色、source image等信息（lv_obj_init_draw_rect_dsc）

6.lv_draw_rect，针对layer，开始进行绘制。
lv_draw_add_task(lv_layer_t * layer, const lv_area_t * coords)函数就是将要绘制的区域信息和layer的裁剪区域通过new task 
联系起来（填充一个绘制task），然后加到队列里面去。

7.lv_draw_finalize_task_creation：
创建和配置绘制任务时需要调用。 它将向小部件发送有关新绘制任务的事件并将其分配给绘制单元

8.lv_draw_dispatch:
尝试获得一个绘制layer的任务，通过lv_draw_dispatch_layer进行分派

9.lv_draw_dispatch_layer
内部用于尝试调度具体层的绘制任务

10.最终调用dispatch_cb进行具体的绘制

11.dispatch_cb由初始化的时候注册实际的处理函数draw_dispatch

12.draw_dispatch函数，layer->draw_buf->data是layer中的target buffer（line205）

13.lv_vg_lite_buffer_from_draw_buf，将layer层的targetbuffer给到draw_uint
lv_vg_lite_buffer_from_draw_buf(&u->target_buffer, layer->draw_buf);

14.然后就可以根据task->type，调用对应的绘制函数。

15.以贴图为例子，lv_draw_vg_lite_img

16.首先，会对绘制需求（task->draw_dsc）进行处理解析，解码出要贴的source image。（lv_vg_lite_buffer_open_image）

17.然后进行底层贴图的驱动调用，进行贴图操作。


第13点中，隐含着如下信息
从u->task_act->draw_dsc解码出src_buf（lv_vg_lite_buffer_open_image）;
u->base_unit.target_layer->draw_buf->data就是target buffer.
layer里面包含了target buffer 和 area信息
task 里面可以解析出source image数据、area信息。

在第12点中，通过下面的code将task和layer联系在一起
    u->base_unit.target_layer = layer;
    u->base_unit.clip_area = &t->clip_area;
    u->task_act = t;

